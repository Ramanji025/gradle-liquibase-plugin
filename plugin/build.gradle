/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '1.2.0'
    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
//    id 'signing'
}

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = 'io.github.ramanji025.liquibase.plugin'
version = '1.0.1'
sourceCompatibility=17
targetCompatibility=17

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    compileOnly(gradleApi())
    compileOnly(gradleTestKit())
}

ext {
    encoding = "UTF-8"
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

tasks.withType(GroovyCompile) {
    options.encoding = encoding
}
tasks.withType(JavaCompile) {
    options.encoding = encoding
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

gradlePlugin {
    // Define the plugin
    website = 'https://github.com/Ramanji025/gradle-liquibase-plugin'
    vcsUrl = 'https://github.com/Ramanji025/gradle-liquibase-plugin'
    plugins {
        liquibasePlugin {
            id = 'io.github.ramanji025.liquibase.plugin'
            implementationClass = 'io.github.ramanji025.liquibase.gradle.LiquibasePlugin'
            displayName = 'Liquibase Build Plugin'
            description = 'Plugin for Building the Liquibase Applications'
            tags.set(['plugins', 'liquibase'])
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Liquibase Gradle plugin')
                root.appendNode('description', 'Gradle plugin to support Liquibase related tasks.')
                root.appendNode('inceptionYear', '2023')
                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Apache License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
            }
        }
    }
    repositories {
        maven {
            url new File(rootProject.projectDir, 'repo').toURI()
        }
    }
}
